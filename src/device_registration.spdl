hashfunction SHA1;
usertype SecretKey;

const pk: Function;
secret sk: Function;
inversekeys (pk,sk);

macro c1 =  { D, R }k(PKG,D);
macro c2 =  { SK, R }k(PKG,D);
macro s = { SHA1(c2) }sk(PKG);
protocol HSSDeviceRegisteration (PKG, D) 
{
	
	role PKG 
	{
		var R: Nonce;
	
		recv_1(D, PKG,  c1);
		
		fresh SK: SecretKey;

		send_2(PKG, D, c2 , s );

		claim_PKG1(PKG, Alive);
		claim_PKG2(PKG, Secret, SK);
		claim_PKG3(PKG, Weakagree);
		claim_PKG4(PKG, Niagree);
		claim_PKG5(PKG, Nisynch);
	}
	
	role D
	{
		fresh R: Nonce;
		
		send_1(D, PKG, c1);

		var SK: SecretKey;
		
		recv_2(PKG, D, c2 , s );

		claim_D1(D, Alive);
		claim_D2(D, Secret, SK);
		claim_D3(D, Weakagree);
		claim_D4(D, Niagree);
		claim_D5(D, Nisynch);
	}
}