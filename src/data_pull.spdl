hashfunction SHA1;
usertype ContentEncryptionKey, Content;

const pk: Function;
secret sk: Function;
inversekeys (pk,sk);

macro m1 = (M, D, R);
macro s1 = { SHA1(m1) }sk(M);
macro ccek = { cek }pk(D);
macro c = { data , R }k(M,D);
macro c2 = ( M, c, ccek);
macro s2 = { SHA1(c2) }sk(D);

protocol HSSDataPull (M, D) 
{
	role M
	{
		fresh R: Nonce;

		send_1(M, D, m1 , s1 );

		var cek: ContentEncryptionKey;
		var data: Content;
		recv_2(D, M, c2, s2 );

		claim_M1(M, Alive);
		claim_M2(M, Secret, cek);
		claim_M3(M, Secret, data);
		claim_M4(M, Weakagree);
		claim_M5(M, Niagree);
		claim_M6(M, Nisynch);
	}

	role D
	{
		var R: Nonce;

		recv_1(M, D, m1 , s1 );
		
		fresh cek: ContentEncryptionKey;
		fresh data: Content;
		send_2(D, M, c2, s2 );

		claim_D1(D, Alive);
		claim_D2(D, Secret, cek);
		claim_D3(D, Secret, data);
		claim_D4(D, Weakagree);
		claim_D5(D, Niagree);
		claim_D6(D, Nisynch);
	}
}