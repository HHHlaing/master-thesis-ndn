hashfunction SHA1;
usertype ContentEncryptionKey, Content;

const pk: Function;
secret sk: Function;
inversekeys (pk,sk);


protocol HSSDataPull (PKG, D1, D2) 
{
	
	role PKG 
	{
		#receive Interest D1
		#send Data D1

		#receive Interest D2
		#send Data D2
	}
	
	role D1 
	{
		# send Interest PKG
		# reveive Data PKG
		
		var Ra: Nonce;
		fresh Rb: Nonce;
		
		# send Interest D2
		send_1(D1, D2,  Rb, D1,  {SHA1(Rb, D1)}sk(D1) );

		# reveive Data D2
		var CEK: ContentEncryptionKey;
		var Data: Content;
		recv_2(D2, D1,      {CEK}pk(D1) ,     { Data, Rb }k(D2,D1) ,  {SHA1(  { CEK}pk(D1) ,     { Data, Rb }k(D2,D1))  }sk(D2));

		claim_D11(D1, Alive);
		claim_D12(D1, Secret, CEK);
		claim_D13(D1, Secret, Data);
		claim_D14(D1, Weakagree);
		claim_D15(D1, Niagree);
		claim_D16(D1, Nisynch);
	}

	role D2 
	{
		# send Interest PKG
		# reveive Data PKG
		
		fresh Ra: Nonce;
		var Rb: Nonce;

		# receive Interest D1
		recv_1(D1, D2,   Rb, D1,  {SHA1(Rb, D1)}sk(D1) );
		
		# send Data D1
		fresh CEK: ContentEncryptionKey;
		fresh Data: Content;
		send_2(D2, D1,      {CEK}pk(D1) ,     { Data, Rb }k(D2,D1) ,  {SHA1(  { CEK}pk(D1) ,     { Data, Rb }k(D2,D1))  }sk(D2));

		claim_D27(D2, Alive);
		claim_D28(D2, Secret, CEK);
		claim_D29(D2, Secret, Data);
		claim_D210(D2, Weakagree);
		claim_D211(D2, Niagree);
		#claim_D212(D2, Nisynch);
	}
}